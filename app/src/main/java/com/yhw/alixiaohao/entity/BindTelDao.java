package com.yhw.alixiaohao.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BIND_TEL".
*/
public class BindTelDao extends AbstractDao<BindTel, Long> {

    public static final String TABLENAME = "BIND_TEL";

    /**
     * Properties of entity BindTel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SpecId = new Property(1, Long.class, "specId", false, "SPEC_ID");
        public final static Property UId = new Property(2, Long.class, "uId", false, "U_ID");
        public final static Property BindCellnumber = new Property(3, String.class, "bindCellnumber", false, "BIND_CELLNUMBER");
        public final static Property BindStartTime = new Property(4, String.class, "bindStartTime", false, "BIND_START_TIME");
        public final static Property BindEndTime = new Property(5, String.class, "bindEndTime", false, "BIND_END_TIME");
        public final static Property UsedTime = new Property(6, String.class, "usedTime", false, "USED_TIME");
        public final static Property BindStatus = new Property(7, String.class, "bindStatus", false, "BIND_STATUS");
    }


    public BindTelDao(DaoConfig config) {
        super(config);
    }
    
    public BindTelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BIND_TEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SPEC_ID\" INTEGER," + // 1: specId
                "\"U_ID\" INTEGER," + // 2: uId
                "\"BIND_CELLNUMBER\" TEXT," + // 3: bindCellnumber
                "\"BIND_START_TIME\" TEXT," + // 4: bindStartTime
                "\"BIND_END_TIME\" TEXT," + // 5: bindEndTime
                "\"USED_TIME\" TEXT," + // 6: usedTime
                "\"BIND_STATUS\" TEXT);"); // 7: bindStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BIND_TEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BindTel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long specId = entity.getSpecId();
        if (specId != null) {
            stmt.bindLong(2, specId);
        }
 
        Long uId = entity.getUId();
        if (uId != null) {
            stmt.bindLong(3, uId);
        }
 
        String bindCellnumber = entity.getBindCellnumber();
        if (bindCellnumber != null) {
            stmt.bindString(4, bindCellnumber);
        }
 
        String bindStartTime = entity.getBindStartTime();
        if (bindStartTime != null) {
            stmt.bindString(5, bindStartTime);
        }
 
        String bindEndTime = entity.getBindEndTime();
        if (bindEndTime != null) {
            stmt.bindString(6, bindEndTime);
        }
 
        String usedTime = entity.getUsedTime();
        if (usedTime != null) {
            stmt.bindString(7, usedTime);
        }
 
        String bindStatus = entity.getBindStatus();
        if (bindStatus != null) {
            stmt.bindString(8, bindStatus);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BindTel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long specId = entity.getSpecId();
        if (specId != null) {
            stmt.bindLong(2, specId);
        }
 
        Long uId = entity.getUId();
        if (uId != null) {
            stmt.bindLong(3, uId);
        }
 
        String bindCellnumber = entity.getBindCellnumber();
        if (bindCellnumber != null) {
            stmt.bindString(4, bindCellnumber);
        }
 
        String bindStartTime = entity.getBindStartTime();
        if (bindStartTime != null) {
            stmt.bindString(5, bindStartTime);
        }
 
        String bindEndTime = entity.getBindEndTime();
        if (bindEndTime != null) {
            stmt.bindString(6, bindEndTime);
        }
 
        String usedTime = entity.getUsedTime();
        if (usedTime != null) {
            stmt.bindString(7, usedTime);
        }
 
        String bindStatus = entity.getBindStatus();
        if (bindStatus != null) {
            stmt.bindString(8, bindStatus);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BindTel readEntity(Cursor cursor, int offset) {
        BindTel entity = new BindTel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // specId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // uId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bindCellnumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bindStartTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // bindEndTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // usedTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // bindStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BindTel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSpecId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setBindCellnumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBindStartTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBindEndTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUsedTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBindStatus(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BindTel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BindTel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BindTel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
