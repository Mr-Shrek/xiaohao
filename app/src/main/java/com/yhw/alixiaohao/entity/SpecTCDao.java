package com.yhw.alixiaohao.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SPEC_TC".
*/
public class SpecTCDao extends AbstractDao<SpecTC, Long> {

    public static final String TABLENAME = "SPEC_TC";

    /**
     * Properties of entity SpecTC.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Sname = new Property(1, String.class, "sname", false, "SNAME");
        public final static Property Stime = new Property(2, String.class, "stime", false, "STIME");
        public final static Property Sprice = new Property(3, String.class, "sprice", false, "SPRICE");
        public final static Property Fprice = new Property(4, String.class, "fprice", false, "FPRICE");
        public final static Property Sdesc = new Property(5, String.class, "sdesc", false, "SDESC");
        public final static Property Status = new Property(6, String.class, "status", false, "STATUS");
    }


    public SpecTCDao(DaoConfig config) {
        super(config);
    }
    
    public SpecTCDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SPEC_TC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SNAME\" TEXT," + // 1: sname
                "\"STIME\" TEXT," + // 2: stime
                "\"SPRICE\" TEXT," + // 3: sprice
                "\"FPRICE\" TEXT," + // 4: fprice
                "\"SDESC\" TEXT," + // 5: sdesc
                "\"STATUS\" TEXT);"); // 6: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SPEC_TC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SpecTC entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sname = entity.getSname();
        if (sname != null) {
            stmt.bindString(2, sname);
        }
 
        String stime = entity.getStime();
        if (stime != null) {
            stmt.bindString(3, stime);
        }
 
        String sprice = entity.getSprice();
        if (sprice != null) {
            stmt.bindString(4, sprice);
        }
 
        String fprice = entity.getFprice();
        if (fprice != null) {
            stmt.bindString(5, fprice);
        }
 
        String sdesc = entity.getSdesc();
        if (sdesc != null) {
            stmt.bindString(6, sdesc);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(7, status);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SpecTC entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sname = entity.getSname();
        if (sname != null) {
            stmt.bindString(2, sname);
        }
 
        String stime = entity.getStime();
        if (stime != null) {
            stmt.bindString(3, stime);
        }
 
        String sprice = entity.getSprice();
        if (sprice != null) {
            stmt.bindString(4, sprice);
        }
 
        String fprice = entity.getFprice();
        if (fprice != null) {
            stmt.bindString(5, fprice);
        }
 
        String sdesc = entity.getSdesc();
        if (sdesc != null) {
            stmt.bindString(6, sdesc);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(7, status);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SpecTC readEntity(Cursor cursor, int offset) {
        SpecTC entity = new SpecTC( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // stime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sprice
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fprice
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sdesc
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SpecTC entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSprice(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFprice(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSdesc(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStatus(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SpecTC entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SpecTC entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SpecTC entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
