package com.yhw.alixiaohao.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MY_USER".
*/
public class MyUserDao extends AbstractDao<MyUser, Long> {

    public static final String TABLENAME = "MY_USER";

    /**
     * Properties of entity MyUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TxId = new Property(1, int.class, "txId", false, "TX_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property PhoneNumber = new Property(3, String.class, "phoneNumber", false, "PHONE_NUMBER");
        public final static Property TelId1 = new Property(4, Long.class, "telId1", false, "TEL_ID1");
        public final static Property TelId2 = new Property(5, Long.class, "telId2", false, "TEL_ID2");
        public final static Property Birthday = new Property(6, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Company = new Property(7, String.class, "company", false, "COMPANY");
        public final static Property Job = new Property(8, String.class, "job", false, "JOB");
        public final static Property Remark = new Property(9, String.class, "remark", false, "REMARK");
        public final static Property Pinyin = new Property(10, String.class, "pinyin", false, "PINYIN");
        public final static Property FirstLetter = new Property(11, String.class, "firstLetter", false, "FIRST_LETTER");
    }


    public MyUserDao(DaoConfig config) {
        super(config);
    }
    
    public MyUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MY_USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TX_ID\" INTEGER NOT NULL ," + // 1: txId
                "\"NAME\" TEXT," + // 2: name
                "\"PHONE_NUMBER\" TEXT," + // 3: phoneNumber
                "\"TEL_ID1\" INTEGER," + // 4: telId1
                "\"TEL_ID2\" INTEGER," + // 5: telId2
                "\"BIRTHDAY\" TEXT," + // 6: birthday
                "\"COMPANY\" TEXT," + // 7: company
                "\"JOB\" TEXT," + // 8: job
                "\"REMARK\" TEXT," + // 9: remark
                "\"PINYIN\" TEXT," + // 10: pinyin
                "\"FIRST_LETTER\" TEXT);"); // 11: firstLetter
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MY_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MyUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTxId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(4, phoneNumber);
        }
 
        Long telId1 = entity.getTelId1();
        if (telId1 != null) {
            stmt.bindLong(5, telId1);
        }
 
        Long telId2 = entity.getTelId2();
        if (telId2 != null) {
            stmt.bindLong(6, telId2);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(7, birthday);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(8, company);
        }
 
        String job = entity.getJob();
        if (job != null) {
            stmt.bindString(9, job);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(10, remark);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(11, pinyin);
        }
 
        String firstLetter = entity.getFirstLetter();
        if (firstLetter != null) {
            stmt.bindString(12, firstLetter);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MyUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTxId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(4, phoneNumber);
        }
 
        Long telId1 = entity.getTelId1();
        if (telId1 != null) {
            stmt.bindLong(5, telId1);
        }
 
        Long telId2 = entity.getTelId2();
        if (telId2 != null) {
            stmt.bindLong(6, telId2);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(7, birthday);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(8, company);
        }
 
        String job = entity.getJob();
        if (job != null) {
            stmt.bindString(9, job);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(10, remark);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(11, pinyin);
        }
 
        String firstLetter = entity.getFirstLetter();
        if (firstLetter != null) {
            stmt.bindString(12, firstLetter);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MyUser readEntity(Cursor cursor, int offset) {
        MyUser entity = new MyUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // txId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phoneNumber
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // telId1
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // telId2
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // birthday
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // company
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // job
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // remark
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // pinyin
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // firstLetter
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MyUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTxId(cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhoneNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTelId1(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setTelId2(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setBirthday(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCompany(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setJob(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRemark(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPinyin(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFirstLetter(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MyUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MyUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MyUser entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
